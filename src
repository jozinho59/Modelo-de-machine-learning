import pandas as pd
from sklearn.model_selection import train_test_split
from sklearn.linear_model import LogisticRegression
from sklearn.metrics import accuracy_score, classification_report
import warnings
import matplotlib.pyplot as plt
import seaborn as sns

# Suprimindo avisos de convergência para melhor legibilidade
warnings.filterwarnings("ignore", category=FutureWarning)
warnings.filterwarnings("ignore", category=DeprecationWarning)
warnings.filterwarnings("ignore", category=UserWarning)

# Carregamento dos dados
data_files = ['AIDS_Classification.csv', 'AIDS_Classification_5000.csv',
              'AIDS_Classification_15000.csv', 'AIDS_Classification_50000.csv']

# Listas para armazenar resultados
accuracies = []
data_file_names = []

# Loop para analisar cada conjunto de dados
for file in data_files:
    print(f"\nConjunto de dados: {file}")
    try:
        # Leitura do conjunto de dados
        df = pd.read_csv(file)

        # Verificação da coluna 'infected'
        if 'infected' not in df.columns:
            raise KeyError("Erro: A coluna 'infected' não está presente no conjunto de dados.")

        # Separação de atributos e rótulo
        X = df.drop(columns=['infected'])
        y = df['infected']

        # Divisão em conjunto de treinamento e teste
        X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

        # Treinamento do modelo de regressão logística
        model = LogisticRegression(max_iter=1000)  # Aumentando o número máximo de iterações
        model.fit(X_train, y_train)

        # Previsões
        y_pred = model.predict(X_test)

        # Avaliação do modelo
        accuracy = accuracy_score(y_test, y_pred)
        accuracies.append(accuracy)
        data_file_names.append(file)
        print(f"Acurácia do modelo: {accuracy:.2f}")

        # Relatório de classificação
        print("Relatório de Classificação:")
        print(classification_report(y_test, y_pred))

    except KeyError as e:
        print(e)
        continue

# Gráfico de Barras para comparação de acurácia
plt.figure(figsize=(10, 6))
sns.barplot(x=data_file_names, y=accuracies, palette='viridis')
plt.xlabel('Conjunto de Dados')
plt.ylabel('Acurácia')
plt.title('Comparação de Acurácia dos Modelos')
plt.xticks(rotation=45)
plt.ylim(0, 1)
plt.show()

# Análise como médico especialista
print("\nAnálise como Médico Especialista:")
print("A previsão de infecção pelo vírus da AIDS é crucial para identificar pacientes em risco.")
print("A acurácia do modelo indica a proporção de previsões corretas, mas é importante considerar outras métricas,")
print("como sensibilidade e especificidade, para entender melhor o desempenho do modelo.")
print("O relatório de classificação fornece informações sobre a precisão, recall e F1-score para cada classe,")
print("o que é fundamental para avaliar o desempenho do modelo em identificar pacientes infectados e não infectados.")
print("No entanto, é necessário avaliar o modelo em conjunto com outras medidas diagnósticas e clínicas para")
print("determinar sua eficácia na prática clínica.")
